generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isBlocked             Boolean                @default(false)
  isTwoFactorEnabled    Boolean                @default(false)
  referralCode          String?                @unique
  referredBy            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  profileImage          String?
  socialMediaFollowed   Boolean                @default(false)
  username              String?                @unique
  newsletterSubscribed  Boolean                @default(false)
  hasWon                Boolean                @default(false)
  lastWinDate           DateTime?
  availableTickets      Int                    @default(0)
  totalTicketsEarned    Int                    @default(0)
  accounts              Account[]
  drawParticipations    DrawParticipation[]
  tickets               Ticket[]
  twoFactorConfirmation TwoFactorConfirmation?
  winnings              Winner[]
}

model Ticket {
  id               String       @id @default(cuid())
  userId           String
  source           TicketSource
  isUsed           Boolean      @default(false)
  drawId           String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  confirmationCode String?
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Winner {
  id          String   @id @default(cuid())
  userId      String
  ticketCount Int
  prizeAmount Float
  claimed     Boolean  @default(false)
  drawDate    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  couponCode  String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Draw {
  id           String              @id @default(cuid())
  drawDate     DateTime
  status       DrawStatus          @default(PENDING)
  winnerId     String?
  prizeAmount  Float               @default(50)
  totalTickets Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  participants DrawParticipation[]
}

model DrawParticipation {
  id             String   @id @default(cuid())
  userId         String
  drawId         String
  ticketsUsed    Int
  isWinner       Boolean  @default(false)
  participatedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  draw           Draw     @relation(fields: [drawId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, drawId])
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum TicketSource {
  SURVEY
  REFERRAL
  SOCIAL
}

enum DrawStatus {
  PENDING
  COMPLETED
  CANCELLED
}
