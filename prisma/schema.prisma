// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum TicketSource {
  SURVEY
  REFERRAL
  SOCIAL
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profileImage  String?
  username      String?   @unique
  password      String?
  role          UserRole @default(USER)
  isBlocked     Boolean @default(false)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  tickets       Ticket[]
  winnings      Winner[]
  drawParticipations DrawParticipation[]
  referralCode  String?   @unique
  referredBy    String?
  socialMediaFollowed Boolean @default(false)
  newsletterSubscribed Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Ticket {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  source            TicketSource
  isUsed            Boolean      @default(false)
  drawId            String?
  confirmationCode  String?      // Unique confirmation code for ticket tracking
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Winner {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticketCount   Int
  prizeAmount   Float
  claimed       Boolean   @default(false)
  drawDate      DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Draw {
  id            String    @id @default(cuid())
  drawDate      DateTime
  status        DrawStatus @default(PENDING)
  winnerId      String?
  prizeAmount   Float     @default(50)
  totalTickets  Int       @default(0)
  participants  DrawParticipation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model DrawParticipation {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  drawId        String
  draw          Draw      @relation(fields: [drawId], references: [id], onDelete: Cascade)
  ticketsUsed   Int
  isWinner      Boolean   @default(false)
  participatedAt DateTime @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, drawId])
}

enum DrawStatus {
  PENDING
  COMPLETED
  CANCELLED
}